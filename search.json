[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "Predicting Student Dropout Rates: An Examination of Student Characteristics and Economic Indicators\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJul 30, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJul 27, 2023\n\n\nTristan Oâ€™Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/final.html",
    "href": "posts/final.html",
    "title": "Predicting Student Dropout Rates: An Examination of Student Characteristics and Economic Indicators",
    "section": "",
    "text": "This project aims to predict student dropout and academic success based on various student characteristics and academic indicators."
  },
  {
    "objectID": "posts/final.html#import-data-and-summary-statistics",
    "href": "posts/final.html#import-data-and-summary-statistics",
    "title": "Predicting Student Dropout Rates: An Examination of Student Characteristics and Economic Indicators",
    "section": "Import data and summary statistics",
    "text": "Import data and summary statistics\n\nimport zipfile\nimport pandas as pd\nfrom kaggle.api.kaggle_api_extended import KaggleApi\n\n\n\n# Initialize the API\napi = KaggleApi()\napi.authenticate()\n\n#download dataset\napi.dataset_download_files('naveenkumar20bps1137/predict-students-dropout-and-academic-success')\n\n#unzip the downloaded dataset\nwith zipfile.ZipFile('predict-students-dropout-and-academic-success.zip', 'r') as zip_ref:\n    zip_ref.extractall()\n\n#load dataset into a pandas DataFrame\ndf = pd.read_csv('dataset.csv')\n\n\n#dataset info\nprint(df.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 4424 entries, 0 to 4423\nData columns (total 35 columns):\n #   Column                                          Non-Null Count  Dtype  \n---  ------                                          --------------  -----  \n 0   Marital status                                  4424 non-null   int64  \n 1   Application mode                                4424 non-null   int64  \n 2   Application order                               4424 non-null   int64  \n 3   Course                                          4424 non-null   int64  \n 4   Daytime/evening attendance                      4424 non-null   int64  \n 5   Previous qualification                          4424 non-null   int64  \n 6   Nacionality                                     4424 non-null   int64  \n 7   Mother's qualification                          4424 non-null   int64  \n 8   Father's qualification                          4424 non-null   int64  \n 9   Mother's occupation                             4424 non-null   int64  \n 10  Father's occupation                             4424 non-null   int64  \n 11  Displaced                                       4424 non-null   int64  \n 12  Educational special needs                       4424 non-null   int64  \n 13  Debtor                                          4424 non-null   int64  \n 14  Tuition fees up to date                         4424 non-null   int64  \n 15  Gender                                          4424 non-null   int64  \n 16  Scholarship holder                              4424 non-null   int64  \n 17  Age at enrollment                               4424 non-null   int64  \n 18  International                                   4424 non-null   int64  \n 19  Curricular units 1st sem (credited)             4424 non-null   int64  \n 20  Curricular units 1st sem (enrolled)             4424 non-null   int64  \n 21  Curricular units 1st sem (evaluations)          4424 non-null   int64  \n 22  Curricular units 1st sem (approved)             4424 non-null   int64  \n 23  Curricular units 1st sem (grade)                4424 non-null   float64\n 24  Curricular units 1st sem (without evaluations)  4424 non-null   int64  \n 25  Curricular units 2nd sem (credited)             4424 non-null   int64  \n 26  Curricular units 2nd sem (enrolled)             4424 non-null   int64  \n 27  Curricular units 2nd sem (evaluations)          4424 non-null   int64  \n 28  Curricular units 2nd sem (approved)             4424 non-null   int64  \n 29  Curricular units 2nd sem (grade)                4424 non-null   float64\n 30  Curricular units 2nd sem (without evaluations)  4424 non-null   int64  \n 31  Unemployment rate                               4424 non-null   float64\n 32  Inflation rate                                  4424 non-null   float64\n 33  GDP                                             4424 non-null   float64\n 34  Target                                          4424 non-null   object \ndtypes: float64(5), int64(29), object(1)\nmemory usage: 1.2+ MB\nNone"
  },
  {
    "objectID": "posts/final.html#clean-the-data-before-doing-visualization",
    "href": "posts/final.html#clean-the-data-before-doing-visualization",
    "title": "Predicting Student Dropout Rates: An Examination of Student Characteristics and Economic Indicators",
    "section": "Clean the data before doing visualization",
    "text": "Clean the data before doing visualization\nThe dataset has already cut off null value and encode categorical columns.\n\n# We do not need the record that is currently enrolled\ndf = df[df['Target'] != 'Enrolled']\nprint(df['Target'].unique())\n\n# cut off outliers that have a unusual age\nnumerical_cols = ['Age at enrollment',]\nfor col in numerical_cols:\n    Q1 = df[col].quantile(0.25)\n    Q3 = df[col].quantile(0.75)\n    IQR = Q3 - Q1\n\n    #only keep rows in the dataframe that do not contain outliers\n    df = df[~((df[col] &lt; (Q1 - 1.5 * IQR)) | (df[col] &gt; (Q3 + 1.5 * IQR)))]\n\n#check the new min max\nprint(\"Min Age: \", df['Age at enrollment'].min())\nprint(\"Max Age: \", df['Age at enrollment'].max())\n\n['Dropout' 'Graduate']\nMin Age:  17\nMax Age:  34\n\n\n\nVisualization 1: The relation between enrollment age and student status\nUpon examining the visualizations, it becomes clear that the probability of successful graduation is notably higher for students who enroll at a younger age, This trend of increased successful graduations with lower enrollment age is particularly pronounced up to the age of 26. After age of 26 it becomes less distinct.\n\nimport matplotlib.pyplot as plt\n\n#Histogram of Age at enrollment with Student Status\ndropout_age = df[df['Target'] == 'Dropout']['Age at enrollment']\ngraduate_age = df[df['Target'] == 'Graduate']['Age at enrollment']\nplt.hist([dropout_age, graduate_age], label=['Dropout', 'Graduate'])\nplt.xlabel('Age at Enrollment')\nplt.ylabel('Count')\nplt.title('Age at Enrollment Distribution by Student Status')\nplt.legend()\nplt.show()\n\n\n#create bins for ages\nbins = range(df['Age at enrollment'].min(), df['Age at enrollment'].max()+1)\n# create a DataFrame for dropouts\ndropout_df = df[df['Target'] == 'Dropout']['Age at enrollment'].value_counts(bins=bins, sort=False).rename('Dropout')\ndropout_df /= df['Age at enrollment'].value_counts(bins=bins, sort=False)\ndropout_df *= 100\n# percentage\n\n#create a DataFrame for graduates\ngraduate_df = df[df['Target'] == 'Graduate']['Age at enrollment'].value_counts(bins=bins, sort=False).rename('Graduate')\ngraduate_df /= df['Age at enrollment'].value_counts(bins=bins, sort=False)\ngraduate_df *= 100\n\n# combine them into a single DataFrame\npercentage_df = pd.concat([dropout_df, graduate_df], axis=1)\n\n#create a bar plot\npercentage_df.plot(kind='bar', stacked=True)\nplt.xlabel('Age at Enrollment')\nplt.ylabel('Percentage (%)')\nplt.title('Percentage of Dropout and Graduate Students by Age at Enrollment')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nVisualization 2: The relation between first semester grade and student status\nUpon examining the box plot, it becomes clear that the probability of successful graduation is notably higher for students who have a better grade at first semester.\n\n#Boxplot of 'Curricular units 1st sem (grade)' divided by Student Status\ndropout_grade = df[df['Target']=='Dropout']['Curricular units 1st sem (grade)']\ngraduate_grade = df[df['Target']=='Graduate']['Curricular units 1st sem (grade)']\nplt.boxplot([dropout_grade, graduate_grade], labels=['Dropout', 'Graduate'])\nplt.title('First Semester Grade Distribution by Student Status')\nplt.ylabel('First Semester Grade')\nplt.show()\n\n\n\n\n\n\nVisualization 3: The relation between Daytime/Evening Attendance and student status\nUpon examining the box plot, it becomes clear that the probability of successful graduation is notably higher for students who attend classes at daytime.\n\n#create a mapping dictionary\nmapping = {0: 'Evening', 1: 'Daytime'}\n#make a copy of the dataframe to not change the original one\ndf_copy = df.copy()\ndf_copy['Daytime/evening attendance'] = df_copy['Daytime/evening attendance'].map(mapping)\n\n#create a grouped dataframe\ngrouped_df = df_copy.groupby(['Daytime/evening attendance', 'Target']).size().unstack()\n\n#create a bar plot\ngrouped_df.plot(kind='bar', stacked=True)\n\nplt.title('Student Status by Daytime/Evening Attendance')\nplt.xlabel('Daytime/Evening Attendance')\nplt.ylabel('Count')\nplt.legend(title='Student Status')\nplt.show()\n\n\n#get percentages\ngrouped_df = grouped_df.div(grouped_df.sum(axis=1), axis=0) * 100\n\n#create a bar plot\ngrouped_df.plot(kind='bar', stacked=True)\nplt.title('Student Status by Daytime/Evening Attendance')\nplt.xlabel('Daytime/Evening Attendance')\nplt.ylabel('Percentage (%)')\nplt.legend(title='Student Status')\nplt.show()\n\n\n\n\n\n\n\n\n\nVisualization 4: The relation between marital status and student status\nUpon analyzing the first chart, itâ€™s evident that students with a single status demonstrate the highest rate of successful graduation. However, the second chart, which presents the overall distribution of marital statuses of population, reveals a substantial imbalance in the dataset, with single students comprising the majority. As such, the previously drawn conclusion that single students are most likely to graduate may be influenced by this imbalance.\n\n#map the marital status\ndef map_marital_status(status):\n    if status == 1:\n        return 'Single'\n    elif status == 2:\n        return 'Married'\n    elif status == 3:\n        return 'Widower'\n    elif status == 4:\n        return 'Divorced'\n    elif status == 5:\n        return 'Facto Union'\n    elif status == 6:\n        return 'Legally Separated'\n    else:\n        return 'Other'\n\n#function to the Marital Status column\ndf_copy['Marital status'] = df_copy['Marital status'].apply(map_marital_status)\n\n#create a grouped dataframe\ngrouped_df_marital = df_copy.groupby(['Marital status', 'Target']).size().unstack()\n\n\n\n\n#normalize to get percentages and multiply by 100\ngrouped_df_marital = grouped_df_marital.div(grouped_df_marital.sum(axis=1), axis=0)*100\n\n\n\n#create a bar plot\ngrouped_df_marital.plot(kind='bar', stacked=True)\nplt.title('Student Status by Marital Status')\nplt.xlabel('Marital status')\nplt.ylabel('Percentage (%)')\nplt.legend(title='Student Status')\nplt.show()\n\n#first let's visualize the number of people of each marital status\ndf_copy['Marital status'].value_counts().plot(kind='bar')\nplt.title('Population Distribution by Marital Status')\nplt.xlabel('Marital Status')\nplt.ylabel('Count')\nplt.show()"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesnâ€™t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]